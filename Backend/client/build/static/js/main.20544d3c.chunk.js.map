{"version":3,"sources":["pages/Home.js","pages/Login.js","components/User.js","components/Form.js","components/TransactionList.js","context/CurrentUser.js","pages/Signup.js","pages/Dashboard.js","pages/Error404.js","App.js","reportWebVitals.js","index.js"],"names":["styles","container","textAlign","padding","backgroundColor","buttons","margin","button","textDecoration","color","borderRadius","fontSize","Home","_jsxs","children","style","_jsx","Link","to","process","Login","email","setEmail","useState","password","setPassword","error","setError","success","setSuccess","navigate","useNavigate","className","onSubmit","async","e","preventDefault","credentials","response","fetch","method","headers","body","JSON","stringify","ok","errMsg","json","type","value","onChange","target","required","User","_ref","user","username","Form","onAddTransaction","setType","category","setCategory","amount","setAmount","date","setDate","parseFloat","alert","placeholder","TransactionList","transactions","length","map","transaction","index","toFixed","Date","toLocaleDateString","account_id","CurrentUser","createContext","CurrentUserProvider","currentUser","setCurrentUser","useEffect","token","localStorage","getItem","console","log","Error","status","statusText","message","getLoggedInUser","Provider","Signup","setUsername","confirmPassword","setConfirmPassword","userData","Dashboard","accountId","income","setIncome","transactionAmount","setTransactionAmount","transactionsList","setTransactionsList","data","Array","isArray","fetchTransactions","toISOString","newTransaction","prev","tran","transaction_id","Error404","src","alt","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20544d3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import '../Dakota-Frontend/landing.css'  put css in public folder to import\r\n// Need to import our styles so we can delete all this below\r\nconst styles = {\r\n  container: {\r\n    textAlign: 'center',\r\n    padding: '20px',\r\n    backgroundColor: '#9c88ff'// Example background color\r\n  },\r\n  buttons: {\r\n    margin: '20px 0',\r\n  },\r\n  button: {\r\n    textDecoration: 'none',\r\n    padding: '10px 20px',\r\n    color: '#fff',\r\n    backgroundColor: '#007bff',\r\n    borderRadius: '5px',\r\n    margin: '5px',\r\n    fontSize: '16px',\r\n  },\r\n};\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <div style={styles.buttons}>\r\n        <Link to=\"/login\" style={styles.button}>\r\n          Log In\r\n        </Link>\r\n        <Link to=\"/signup\" style={styles.button}>\r\n          Sign Up\r\n        </Link>\r\n        <div>\r\n          Server URL: {process.env.REACT_APP_SERVER_URL}\r\n        </div>\r\n      </div>\r\n      \r\n      <p>Already have an account? <Link to=\"/login\">Log in here</Link></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","// import React, { useState } from 'react';\r\n// import { useNavigate, Link } from 'react-router-dom'; // Use Link instead of <a> tag\r\n\r\n// const Login = () => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [errorMessage, setErrorMessage] = useState('');\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     const credentials = { email, password };\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/login', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(credentials),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Login failed, please check your credentials');\r\n//       }\r\n\r\n//       // On success, navigate to the dashboard or home\r\n//       navigate('/dashboard');\r\n//     } catch (error) {\r\n//       setErrorMessage(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Login to Your Account</h2>\r\n//       {errorMessage && <p>{errorMessage}</p>}\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label htmlFor=\"email\">Email</label>\r\n//           <input\r\n//             type=\"email\"\r\n//             id=\"email\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label htmlFor=\"password\">Password</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\">Login</button>\r\n//       </form>\r\n//       <p>Don't have an account? <Link to=\"/signup\">Sign Up</Link></p> {/* Use Link here */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    const credentials = { email, password };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/accounts/login', { // Updated endpoint\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // need to save token first before navigating to dashboard\r\n        setSuccess(true);\r\n        // On success, navigate to the dashboard or home\r\n        navigate('/dashboard');\r\n      } else {\r\n        const errMsg = await response.json();\r\n        setError(errMsg.error || 'Login failed, please check your credentials.');\r\n      }\r\n    } catch (error) {\r\n      setError('An error occurred during login.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login to Your Account</h2>\r\n      {error && <p className=\"error\">{error}</p>}\r\n      {success ? (\r\n        <p className=\"success\">Login successful! Redirecting...</p>\r\n      ) : (\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label>Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Login</button>\r\n        </form>\r\n      )}\r\n      <p>Don't have an account? <Link to=\"/signup\">Sign Up</Link></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nconst User = ({ user }) => {\r\n  if (!user) {\r\n    return <p>No user data available</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>User Profile</h2>\r\n      <div>\r\n        <strong>Username:</strong> {user.username}\r\n      </div>\r\n      <div>\r\n        <strong>Email:</strong> {user.email}\r\n      </div>\r\n      {/* Add more user-related details here if needed */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n\r\n// this is the account ","import React, { useState } from 'react';\r\n\r\nconst Form = ({ onAddTransaction }) => {\r\n  \r\n  const [type, setType] = useState('income');\r\n  const [category, setCategory] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [date, setDate] = useState('');\r\n\r\n \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n   \r\n    if (!category || !amount || !date) {\r\n      alert('Please fill out all fields');\r\n      return;\r\n    }\r\n\r\n     \r\n    onAddTransaction({\r\n      type,\r\n      category,\r\n      amount: parseFloat(amount),\r\n      date\r\n    });\r\n\r\n    // Clear form after submission\r\n    setCategory('');\r\n    setAmount('');\r\n    setDate('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <label>Type:</label>\r\n        <select value={type} onChange={(e) => setType(e.target.value)}>\r\n          <option value=\"income\">Income</option>\r\n          <option value=\"expense\">Expense</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        <label>Category:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={category}\r\n          onChange={(e) => setCategory(e.target.value)}\r\n          placeholder=\"Category\"\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label>Amount:</label>\r\n        <input\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          placeholder=\"Amount\"\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label>Date:</label>\r\n        <input\r\n          type=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <button type=\"submit\">Add Transaction</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst TransactionList = ({ transactions }) => {\r\n  if (!transactions.length) {\r\n    return <p>No transactions found</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Transaction History</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Type</th>\r\n            <th>Category</th>\r\n            <th>Amount</th>\r\n            <th>Date</th>\r\n            <th>Account</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.map((transaction, index) => (\r\n            <tr key={index}>\r\n              <td>{transaction.type}</td>\r\n              <td>{transaction.category}</td>\r\n              <td>${transaction.amount.toFixed(2)}</td>\r\n              <td>{new Date(transaction.date).toLocaleDateString()}</td>\r\n              <td>{transaction.account_id}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n","import { useEffect, createContext, useState } from \"react\";\r\n\r\nexport const CurrentUser = createContext();\r\n\r\nfunction CurrentUserProvider({ children }) {\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const getLoggedInUser = async () => {\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                if (!token) {\r\n                    console.error('No token found');\r\n                    return;\r\n                }\r\n                console.log(token)\r\n                const response = await fetch('http://localhost:5000/authentication/profile', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n                }\r\n\r\n                const user = await response.json();\r\n                setCurrentUser(user);\r\n            } catch (error) {\r\n                console.error('Error fetching user profile:', error.message || error);\r\n            }\r\n        };\r\n        getLoggedInUser();\r\n    }, []);\r\n\r\n    return (\r\n        <CurrentUser.Provider value={{ currentUser, setCurrentUser }}>\r\n            {children}\r\n        </CurrentUser.Provider>\r\n    );\r\n}\r\n\r\nexport default CurrentUserProvider;\r\n","// signup is still in progress\r\nimport React, { useState } from 'react';\r\n\r\nconst Signup = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n\r\n        if (password !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n\r\n        const userData = {\r\n            username,\r\n            email,\r\n            password\r\n        };\r\n\r\n        try {\r\n            // Fetch call to backend for signup\r\n            const response = await fetch('http://localhost:5000/accounts/signup', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            });\r\n\r\n            if (response.ok) {\r\n                setSuccess(true);\r\n            } else {\r\n                const errMsg = await response.json();\r\n                setError(errMsg.error || 'Signup failed.');\r\n            }\r\n        } catch (error) {\r\n            setError('An error occurred during signup.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"signup-container\">\r\n            <h2>Sign Up</h2>\r\n            {error && <p className=\"error\">{error}</p>}\r\n            {success ? (\r\n                <p className=\"success\">Signup successful! Please log in.</p>\r\n            ) : (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <label>Username:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Email:</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Password:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Confirm Password:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\">Sign Up</button>\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","\r\n// track\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst Dashboard = ({ accountId }) => {\r\n  const [income, setIncome] = useState('');\r\n  const [transactionAmount, setTransactionAmount] = useState('');\r\n  const [transactionsList, setTransactionsList] = useState([]);  // Initialize as an empty array\r\n\r\n  // Fetch transactions from the backend \r\n  // fetch token before making the call \r\n  useEffect(() => {\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        // need to pass bearer token with url\r\n        const response = await fetch(`http://localhost:5000/transactions/`);\r\n        const data = await response.json();\r\n        \r\n        // Ensure that the data is an array before setting state\r\n        if (Array.isArray(data)) {\r\n          setTransactionsList(data);\r\n        } else {\r\n          console.error(\"Expected array, but got:\", data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching transactions:', error);\r\n      }\r\n    };\r\n\r\n    fetchTransactions();\r\n  }, [accountId]);\r\n\r\n  const handleIncomeChange = (e) => {\r\n    setIncome(e.target.value);\r\n  };\r\n\r\n  const handleTransactionChange = (e) => {\r\n    setTransactionAmount(e.target.value);\r\n  };\r\n\r\n  // Handle adding a new transaction\r\n  const handleAddTransaction = async (e) => {\r\n    e.preventDefault();\r\n    if (transactionAmount) {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/transactions', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            account_id: accountId, // Include accountId to associate the transaction\r\n            type: 'expense', // Assuming you're adding an expense; can be dynamic\r\n            category: 'General', // Can be dynamic based on user input\r\n            amount: parseFloat(transactionAmount), // Ensure it's a float\r\n            date: new Date().toISOString(), // Set the current date\r\n          }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          const newTransaction = await response.json();\r\n          setTransactionsList((prev) => [...prev, newTransaction]); // Add new transaction to the list\r\n          setTransactionAmount(''); // Reset input field\r\n        } else {\r\n          console.error('Error adding transaction');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding transaction:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Dashboard</h2>\r\n\r\n      <div>\r\n        <h3>Input Your Income</h3>\r\n        <input\r\n          type=\"number\"\r\n          value={income}\r\n          onChange={handleIncomeChange}\r\n          placeholder=\"Enter your income here\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Log Your Transactions</h3>\r\n        <form onSubmit={handleAddTransaction}>\r\n          <input\r\n            type=\"number\"\r\n            value={transactionAmount}\r\n            onChange={handleTransactionChange}\r\n            placeholder=\"Enter a transaction amount\"\r\n            required\r\n          />\r\n          <button type=\"submit\">Add Transaction</button>\r\n        </form>\r\n      </div>\r\n\r\n      <h4>Transactions List</h4>\r\n      <ul>\r\n        {/* Check if transactionsList is an array before mapping */}\r\n        {Array.isArray(transactionsList) && transactionsList.length > 0 ? (\r\n          transactionsList.map((tran) => (\r\n            <li key={tran.transaction_id}>\r\n              ${tran.amount.toFixed(2)} - {tran.category} ({tran.type})\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No transactions found.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","function Error404() {\r\n    return (\r\n        <main>\r\n            <h1>404: PAGE NOT FOUND</h1>\r\n            <p>Oops, sorry, we can't find this page!</p>\r\n            <img src=\"http://localhost:5000/images/kittykat.jpeg\" alt=\"cute cat pic\" />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\nimport User from './components/User';\r\nimport Form from './components/Form';\r\nimport TransactionList from './components/TransactionList';\r\nimport CurrentUserProvider from './context/CurrentUser';\r\nimport Signup from './pages/Signup';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Error404 from './pages/Error404';\r\nimport './style.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <CurrentUserProvider>\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route path=\"/login\" element={<Login />} />\r\n          <Route path=\"/user\" element={<User />} />\r\n          <Route path=\"/form\" element={<Form />} />\r\n          <Route path=\"/dashboard\" element={<Dashboard />} />\r\n          <Route path=\"/transactionlist\" element={<TransactionList />} />\r\n          <Route path=\"/signup\" element={<Signup />} />\r\n          <Route path=\"*\" element={<Error404 />} />\r\n        </Routes>\r\n      </Router>\r\n    </CurrentUserProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}